#!/bin/bash

# This script can be invoked as either ssh or scp.

# Current problem: 255 is not a good check for success
# Another problem: this URI loop assumes the uri is the first non-hyphen arg... is that bad?

THIS_CMD=$(basename $0)  # ssh or scp

if [ "scp" == "$THIS_CMD" ]; then
        for ARG in $@
        do
                if [[ $ARG == *:* ]]; then
                        URI_WITH_COLON=$ARG
                fi
        done

        URI=$(echo $URI_WITH_COLON | sed -r s/:[^:]*//g)
else # ssh
        for ARG in $@
        do
                if [[ $ARG != -* ]]; then
                        URI=$ARG
                        break
                fi
        done
fi

if [ -z "$URI" ]; then
        echo "Unable to parse URI."
        if [ "scp" == "$THIS_CMD" ]; then
                echo "scp URIs must contain a :"
        fi
        exit 1
fi

HOSTNAME=$(echo $URI | sed -r s/^[^@]+@//g)

SSH_CMD="/usr/bin/$THIS_CMD -o PasswordAuthentication=no -o StrictHostKeyChecking=no $@"

try_ssh () {
        $SSH_CMD
        RETCODE=$?
        # 255 for password auth wrong
        # 255 for known_hosts wrong
        # 1 for scp access denied

        if [ "scp" == "$THIS_CMD" ]; then
                if [ $RETCODE -ne 1 ]; then
                        # Success
                        exit $RETCODE
                fi
        else

                # But commands can return 255, and then ssh does too! what to do about that?
                if [ $RETCODE -ne 255 ]; then
                        # Success
                        exit $RETCODE
                fi
        fi
}

# Attempt to ssh with password entry disabled
try_ssh

# Replace the host key in known_hosts
ssh-keygen -R $HOSTNAME
ssh-keyscan $HOSTNAME >> ~/.ssh/known_hosts

# try again
try_ssh

# Now, if it still failed, it's probably authentication

echo -n "Password: "
read -s SSHPASS
export SSHPASS
sshpass -e ssh-copy-id $URI
try_ssh

# Now, if it failed, the remote host simply doesn't support passwordless auth.  Fall back on normal SSH.
echo "Passwordless auth not supported?"
sshpass -e /usr/bin/$THIS_CMD $@
